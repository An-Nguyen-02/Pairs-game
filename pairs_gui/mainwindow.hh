#ifndef MAINWINDOW_HH
#define MAINWINDOW_HH

#include <QMainWindow>
#include <QTimer>
#include <QPushButton>
#include <QMessageBox>
#include <QtDebug>
#include <card.hh>
#include <player.hh>
#include <vector>
#include <string>
#include <random>
#include <sstream>

QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);
    ~MainWindow();

private slots:
    void apply_button_clicked();
    void reset_button_clicked();
    void start_timer();
    void handle_card_clicked();
    void compare_flipped_card();
    void handle_player_clicked();
private:
    Ui::MainWindow *ui;
    // Initial constant

    // Card size and position property:
    const int VIEW_Y = 130;
    const int VIEW_X = 260;
    const int CARD_WIDTH = 40;
    const int CARD_HEIGTH = 40;

    // Player button size and position propoerty:
    const int PLAYER_X = 270;
    const int PLAYER_Y = 20;
    const int PLAYER_STEP = 150;

    // Player cards stack position
    const int STACK_X = 250;
    const int STACK_Y = 50;
    const int STACK_STEP = 160;
    const int CARD_PER_ROW = 7;

    const int look_time = 1000;

    // User input

    int seed_;
    unsigned int pairs_;
    // if number of names > num player spinbox
    // num_players = number of names
    unsigned int num_players_;
    std::vector<std::string> names_list_;
    // Board variable
    unsigned int turn = 0;
    unsigned int cards_out = 0;
    int face_up_cards = 0;
    QPixmap card_back;

    //Store first pressed card to compare
    // second pressed card later.
    QPushButton* pressed_button = nullptr;
    QTimer* timer = new QTimer(this);

    std::vector<QString> card_face_list_;

    std::vector<Card> flipped_card;

    std::vector<Card> game_board_;

    std::vector<Player> player_list_;

    // private functions

    //init functions
    void init_card_faces_and_back();
    void init_player();
    void init_board();

    // support functions

    // Converts the given numeric string to the corresponding integer
    // (by calling stoi).
    // If the given string is not numeric, returns 0
    // (which leads autogenerated seed value
    unsigned int stoi_with_check(const std::string& str);

    void process_names();
    void set_player_queu();
    QPoint find_local_cursor();
    unsigned int next_free(unsigned int start);

    // caculate dimension of the game board
    void calculate_factors(unsigned int& smaller_factor, unsigned int& bigger_factor);
    int find_largest_pairs();

    // Other functions
    void Game_is_over();
    void change_turn();
    void add_card_player(Card& card);
    void draw_player_new_card(int x, int y, Card& card);
    void win_or_draw();


};
#endif // MAINWINDOW_HH

